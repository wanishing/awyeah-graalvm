{:paths ["." "src"]
 :deps  {
         org.babashka/spec.alpha {:git/url "https://github.com/babashka/spec.alpha"
                                  :git/sha "8df0712896f596680da7a32ae44bb000b7e45e68"}}


 :tasks
 {:requires ([babashka.fs :as fs]
             [build-shared :as bs]
             [clojure.string :as str])
  :init     (do
              (def windows? (str/starts-with? (System/getProperty "os.name")
                                              "Windows")))


  push-tag {:doc "Create tag from the current version and push it"
            :task
            (let [tag (str "v" bs/version)]
              (shell "git" "tag" tag)
              (shell "git" "push" "origin" tag))}

  clean {:doc  "Clean target dir"
         :task (doseq [dir [bs/build-folder]]
                 (fs/delete-tree dir))}

  lint {:doc "Run cljstyle & clj-kondo"
        :task
        (do
          (shell "cljstyle fix --report src")
          (shell "clj-kondo --lint src"))}

  run-main {:doc  "Run main"
            :task (apply clojure "-M -m mal.core" *command-line-args*)}

  uberjar {:doc  "Builds uberjar"
           :task (when (seq (fs/modified-since bs/build-folder
                                               ["deps.edn" "build.clj" "src"]))
                   (clojure "-T:build uber"))}

  run-uber {:doc     "Run uberjar"
            :depends [uberjar]
            :task    (apply shell "java -jar" bs/uber-file *command-line-args*)}

  graalvm {:doc "Checks GRAALVM_HOME env var"
           :task
           (let [env (System/getenv "GRAALVM_HOME")]
             (assert env "Set GRAALVM_HOME")
             env)}

  native-image {:doc     "Builds native image"
                :depends [graalvm uberjar]
                :task    (do
                           (shell (str (fs/file graalvm
                                                "bin"
                                                (if windows?
                                                  "gu.cmd"
                                                  "gu")))
                                  "install" "native-image")
                           (shell (str (fs/file graalvm
                                                "bin"
                                                (if windows?
                                                  "native-image.cmd"
                                                  "native-image")))
                                  "-jar" bs/uber-file)
                           (println (format "Created %s executable" bs/app-name)))}}}
